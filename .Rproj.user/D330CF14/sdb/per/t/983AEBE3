{
    "collab_server" : "",
    "contents" : "# server.R\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(plotly)\nrequire(shinydashboard)\nrequire(data.world)\nrequire(readr)\nrequire(DT)\nrequire(leaflet)\nlibrary(plotly)\n\n\n\n\n\nshinyServer(function(input, output) { \n \n\n\n  \n  \n  df11 <- eventReactive(input$click1, {\n    \n      print(\"Getting from data.world\")\n      query(\n        data.world(propsfile = \"www/.data.world\"),\n        dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n        query= \"SELECT neighbourhood, room_type, avg(price) as average_price,\n        SUM(price) as sum_price, count(neighbourhood) as count_neighbourhood\n        \n        \n        \n        from clean_listings_summary\n        where room_type = 'Entire home/apt'\n        group by neighbourhood, room_type\n        order by neighbourhood\"\n      \n      ) \n    }\n)\n    \n  df12 <- eventReactive(input$click1, {\n    \n    print(\"Getting from data.world\")\n    query(\n      data.world(propsfile = \"www/.data.world\"),\n      dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n      query= \"SELECT neighbourhood, room_type, avg(price) as average_price,\n      SUM(price) as sum_price, count(neighbourhood) as count_neighbourhood\n      \n      \n      \n      from clean_listings_summary\n      where room_type = 'Private room'\n      group by neighbourhood, room_type\n      order by neighbourhood\"\n      \n    ) \n  }\n    )\n  \n  df13 <- eventReactive(input$click1, {\n    \n    print(\"Getting from data.world\")\n    query(\n      data.world(propsfile = \"www/.data.world\"),\n      dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n      query= \"SELECT neighbourhood, room_type, avg(price) as average_price,\n      SUM(price) as sum_price, count(neighbourhood) as count_neighbourhood\n      \n      \n      \n      from clean_listings_summary\n      where room_type = 'Shared room'\n      \n      group by neighbourhood, room_type\n      order by neighbourhood\"\n      \n    ) \n  }\n    )\n  \n  output$data1 <- renderDataTable({DT::datatable(df11(), rownames = FALSE,\n                  extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n  output$data2 <- renderDataTable({DT::datatable(df12(), rownames = FALSE,\n                                                 extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n  output$data3 <- renderDataTable({DT::datatable(df13(), rownames = FALSE,\n                                                 extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n  output$plot1 <- renderPlotly({\n    p <- ggplot(df11(), aes(x=factor(neighbourhood), y=average_price)) + geom_bar(stat = 'identity', color = \"blue\", fill = \"lightblue\") + geom_hline(yintercept=365.8) + labs(title=\"Entire Room/Apt Prices\") + theme_light() + theme(text = element_text(size=8), axis.text.x = element_text(angle=90, hjust=1)) + labs(x = 'Zip Code')\n    ggplotly(p)\n  })\n  \n  output$plot2 <- renderPlotly({\n    p <- ggplot(df12(), aes(x=factor(neighbourhood), y=average_price)) + geom_bar(stat = 'identity', color = \"blue\", fill = \"lightblue\") + geom_hline(yintercept=105) + labs(title=\"Private Room Prices\") + theme_light() + theme(text = element_text(size=8), axis.text.x = element_text(angle=90, hjust=1)) + labs(x = 'Zip Code')\n    ggplotly(p)\n  })\n  \n  output$plot3 <- renderPlotly({\n    p <- ggplot(df13(), aes(x=factor(neighbourhood), y=average_price)) + geom_bar(stat = 'identity', color = \"blue\", fill = \"lightblue\") + geom_hline(yintercept=105) + labs(title=\"Shared Room Prices\") + theme_light() + theme(text = element_text(size=8), axis.text.x = element_text(angle=90, hjust=1)) + labs(x = 'Zip Code')\n    ggplotly(p)\n  })\n  \n \n\n\n  \n  df2 <- eventReactive(input$click2, {\n    \n    print(\"Getting from data.world\")\n    query(\n      data.world(propsfile = \"www/.data.world\"),\n      dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n      query= \"SELECT neighbourhood, avg(price) as average_price, (avg(price) - 249.7) as price_difference\n       \n        from clean_listings_summary\n        \n        group by neighbourhood\n        order by neighbourhood\"\n      \n    ) \n  }\n    )\n  \n  \n  output$barchartData1 <- renderDataTable({DT::datatable(df2(), rownames = FALSE,\n                         extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n  output$barchartPlot1 <- renderPlotly({\n    p <- ggplot(df2(), aes(x=factor(neighbourhood), y=price_difference)) + geom_bar(stat = 'identity', color=\"blue\", fill=\"lightblue\") + labs(x = 'Zip Code') + theme_light() + theme(text = element_text(size=8), axis.text.x = element_text(angle=90, hjust=1))\n    ggplotly(p)\n  })\n  \n  \n  df3 <- eventReactive(input$click3, {\n    \n    print(\"Getting from data.world\")\n    query(\n      data.world(propsfile = \"www/.data.world\"),\n      dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n      query= \"SELECT cast(l.neighbourhood as string), p.B05001_001 as population, avg(price) as             average_price\n      from clean_listings_summary l join \n      uscensusbureau.`acs-2015-5-e-foreignbirth`.`USA_ZCTA.csv/USA_ZCTA` p\n      on (l.neighbourhood = p.ZCTA)\n      group by l.neighbourhood\n      order by l.neighbourhood\"\n      \n    ) \n  }\n    )\n  \n  \n  output$barchartData2 <- renderDataTable({DT::datatable(df3(), rownames = FALSE,\n                                                         extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n  output$barchartPlot2 <- renderPlot({\n    ggplot(df3(), aes(x=factor(neighbourhood), y=population)) + geom_bar(stat = 'identity') + labs(x = 'Zip Code')\n  })\n\n  \n  \n  output$barchartPlot3 <- renderPlot({\n    ggplot(df3(), aes(x=factor(neighbourhood), y=average_price)) + geom_bar(stat = 'identity') + labs(x = 'Zip Code')\n  })\n  \n  df_hist <- eventReactive(input$click4, {\n    \n    print(\"Getting from data.world\")\n    query(\n      data.world(propsfile = \"www/.data.world\"),\n      dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n      query= \"SELECT price \n       \n        from clean_listings_summary\n        where price < 4000\"\n      \n    ) \n  }\n  )\n  \n  output$histogramData <- renderDataTable({DT::datatable(df_hist(), rownames = FALSE,\n                                                         extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n   output$histogramPlot <- renderPlotly({\n     p <- ggplot(df_hist(), aes(x=price)) +\n       geom_histogram(binwidth = 10, color = \"blue\") + theme_light()\n     ggplotly(p)\n  })\n   \n   df_scatter <- eventReactive(input$click5, {\n     \n     print(\"Getting from data.world\")\n     query(\n       data.world(propsfile = \"www/.data.world\"),\n       dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n       query= \"SELECT p.B05001_001 as population, avg(price) as average_price,\n              neighbourhood\n      from clean_listings_summary l join \n      uscensusbureau.`acs-2015-5-e-foreignbirth`.`USA_ZCTA.csv/USA_ZCTA` p\n      on (l.neighbourhood = p.ZCTA)\n      group by l.neighbourhood\"\n       \n     ) \n   }\n   )\n   \n   output$scatterData <- renderDataTable({DT::datatable(df_scatter(), rownames = FALSE,\n                                                          extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n   )\n   })\n   \n   output$scatterPlot <- renderPlotly({\n     p <- ggplot(df_scatter(), aes(x=population, y=average_price, fill = neighbourhood)) +\n       geom_point(color = \"skyblue\" )+ labs(x = 'Population per Zip Code') + geom_smooth(method=lm, se=FALSE) + guides(neighbourhood=FALSE) + theme_light()\n     ggplotly(p)\n   })\n   \n   KPI_Low = reactive({input$KPI1})     \n   KPI_High = reactive({input$KPI2})\n   \n   df_kpi <- eventReactive(input$click6, {\n     \n     print(\"Getting from data.world\")\n     query(\n       data.world(propsfile = \"www/.data.world\"),\n       dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n       query= \"SELECT neighbourhood, room_type, avg(price) as avg_price,\n       SUM(price) as sum_price, count(neighbourhood) as count_neighbourhood,\n       \n       case\n       when (SUM(price) / COUNT(neighbourhood)) < ? then '03 Low'\n       when (SUM(price) / COUNT(neighbourhood)) > ? then '01 High'\n       else '02 Medium'\n       end AS average_price\n       \n       from clean_listings_summary\n       \n       group by neighbourhood, room_type\n       order by neighbourhood\",\n        queryParameters = list(KPI_Low(), KPI_High())\n      ) \n    }\n)\n    \n  output$kpiData <- renderDataTable({DT::datatable(df_kpi(), rownames = FALSE,\n                  extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n  output$kpiPlot <- renderPlotly({p <- ggplot(df_kpi()) + \n      \n      geom_text(aes(x=room_type, y=factor(neighbourhood), label=round(avg_price, 2)), size=3) +\n      geom_tile(aes(x=room_type, y=factor(neighbourhood), fill=average_price), alpha=0.50) + labs(x = 'Zip Code') + theme_light()\n      ggplotly(p)\n  })\n\n  df_box <- eventReactive(input$click7, {\n    \n    print(\"Getting from data.world\")\n    query(\n      data.world(propsfile = \"www/.data.world\"),\n      dataset=\"kurtakranz/s-17-dv-final-project\", type=\"sql\",\n      query= \"SELECT price, cast(neighbourhood as string)\n      \n      from clean_listings_summary\n      where neighbourhood in (78703, 78730, 78732, 78735, 78737)\n      \" \n      \n    ) \n  }\n    )\n  \n  output$boxplotData <- renderDataTable({DT::datatable(df_box(), rownames = FALSE,\n                                                         extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  \n  output$boxplotPlot <- renderPlotly({\n    p <- ggplot(df_box(), aes(x=factor(neighbourhood), y=price)) + labs(x = 'Zip Code') + \n      geom_boxplot() + theme_light()\n    ggplotly(p)\n  })\n  \n  \n\n  \n  \n} \n)",
    "created" : 1493607150315.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "437473247",
    "id" : "983AEBE3",
    "lastKnownWriteTime" : 1493923416,
    "last_content_update" : 1493923416407,
    "path" : "~/CS329E/DataVisualization/s17dvfinalproject-mbigi-stroe-kranz/02 Shiny/Barcharts/server.R",
    "project_path" : "02 Shiny/Barcharts/server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}