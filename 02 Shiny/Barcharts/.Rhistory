tbl_df(diamonds)
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
diamonds %>% dplyr::select(cut, clarity) %>% tbl_df
diamonds %>% dplyr::select(., cut, clarity) %>% tbl_df
diamonds %>% dplyr::select(color:price) %>% tbl_df # Equivalent SQL: none
names(diamonds)
diamonds %>% dplyr::select(color:price) %>% tbl_df # Equivalent SQL: none
diamonds %>% dplyr::select(-cut, -clarity) %>% tbl_df # Equivalent SQL: none
x <- diamonds %>% dplyr::select(cut, clarity) %>% tbl_df
x
diamonds %>% dplyr::select(cut, clarity) %>% dplyr::filter(cut == "Good") %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut = 'Good';
diamonds %>% dplyr::select(cut, clarity) %>% dplyr::filter(cut %in% c("Good", "Fair"), clarity == "VS1") %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where (cut = 'Good' or cut = 'Fair') and clarity = 'VS1';
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x), y) %>% tbl_df
diamonds %>% dplyr::select(cut, clarity, x, y, z) %>% dplyr::filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% dplyr::mutate(sum = x+y+z) %>% tbl_df # Equivalent: select cut, clarity, x, y, z, x+y+z as sum from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null
pmin(1:5, 5:1) # Pairwise min
diamonds %>% dplyr::mutate(minxy = pmin(x,y)) %>% tbl_df
diamonds %>% dplyr::mutate(minxy = pmin(x,y, z)) %>% tbl_df
pmax(1:5, 5:1) # Pairwise max
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% dplyr::mutate(cummin_x = cummin(x)) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cummax()
diamonds %>% dplyr::mutate(between_x = between(x,4,4.1)) %>% tbl_df
diamonds %>% dplyr::mutate(lead_z = lead(z)-z) %>% tbl_df
diamonds %>% dplyr::mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% dplyr::summarise(n=n()) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cume_dist()
c(1:5) %>% cume_dist()
c(1,1:5) %>% cume_dist()
dd <- dplyr::sample_n(diamonds, 100) %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::arrange(desc(price_percent)) %>% tbl_df # Equivalent SQL:
View(dd)
bottom20_diamonds <- diamonds %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::filter(price_percent <= .20) %>% dplyr::arrange(desc(price_percent)) %>% tbl_df
View(bottom20_diamonds)
diamonds %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::filter(price_percent >= .80) %>% dplyr::arrange(desc(price_percent)) %>% tbl_df
top20_diamonds <- diamonds %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::filter(price_percent >= .80) %>% dplyr::arrange(desc(price_percent)) %>% tbl_df
diamonds %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat, color = cut)) + geom_point()
View(top20_diamonds)
ds <- diamonds %>% summarize(max_price = max(price)) # Equivalent SQL select max(price) as max_price from diamonds;
View(ds)
d <- diamonds %>% group_by(cut) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(n) %>% View # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;
View(x)
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n()) # Equivalent SQL: select avg(x) as avg, sum(x)+sum(y)+sum(z) as sum, count(*) as n from diamonds;
d <- diamonds %>% group_by(cut) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(n) %>% View # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;
lapply('alphabet begins with aabc', gsub, pattern="a+.c",replacement= "")
lapply('alphabet begins with aabc', gsub, pattern="a+.*c",replacement= "")
diamonds %>% group_by(cut, color, clarity)
require(tidyr)
require(ggplot2)
require(dplyr)
tbl_df(diamonds)
View(diamonds)
dplyr::select(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;
diamonds %>% group_by(cut, color, clarity)
diamonds %>% group_by(cut, color, clarity) %>% dplyr::summarise(mean_carat = mean(carat))
diamonds %>% group_by(cut, color, clarity) %>% dplyr::summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
diamonds %>% group_by(cut, color, clarity) %>% dplyr::summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point()
diamonds %>% group_by(cut, color, clarity) %>% dplyr::summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
require(tidyr)
diamonds$ID<-seq.int(nrow(diamonds))
head(diamonds)
head(diamonds) %>% dplyr::select(ID, cut, color) %>% tidyr::gather(variable, value, -ID) %>% tbl_df
view(diamonds)
View(diamonds)
head(diamonds)
setwd(dir = "../00 Doc/")
source("../01 Data/ETL_ticker.R")
summary(df)
sessionInfo(package=NULL)
setwd(dir = "../00 Doc/")
source("../01 Data/ETL_ticker.R")
summary(df)
install.packages("remotes")
library(remotes)
remotes::install_github("datadotworld/data.world-r")
import(data.world)
conn <- data.world()
result <- query(conn, dataset="cannata/diamonds", type="sql",
query="
select color, clarity,
sum(price) as sum_price,
sum(carat) as sum_carat,
sum(price) / sum(carat) as ratio,
case
when sum(price) / sum(carat) < ? then '03 Low'
when sum(price) / sum(carat) < ? then '02 Medium'
else '01 High'
end AS kpi
from diamonds
group by color, clarity
order by clarity
"
,queryParameters = list(3000, 5000)
)
View(result)
View(result)
import(data.world)
conn <- data.world()
result <- query(conn, dataset="cannata/diamonds", type="sql",
query="
select color, clarity,
sum(price) as sum_price,
sum(carat) as sum_carat,
sum(price) / sum(carat) as ratio,
case
when sum(price) / sum(carat) < ? then '03 Low'
when sum(price) / sum(carat) < ? then '02 Medium'
else '01 High'
end AS kpi
from diamonds
group by color, clarity
order by clarity
"
,queryParameters = list(3000, 5000)
)
require(data.world)
conn <- data.world()
result <- query(conn, dataset="cannata/diamonds", type="sql",
query="
select color, clarity,
sum(price) as sum_price,
sum(carat) as sum_carat,
sum(price) / sum(carat) as ratio,
case
when sum(price) / sum(carat) < ? then '03 Low'
when sum(price) / sum(carat) < ? then '02 Medium'
else '01 High'
end AS kpi
from diamonds
group by color, clarity
order by clarity
"
,queryParameters = list(3000, 5000)
)
View(result)
getwd()
shiny::runApp('CS329E/DataVisualization/s17dvfinalproject-mbigi-stroe-kranz/02 Shiny/Barcharts')
install.packages("viridis")
runApp('CS329E/DataVisualization/s17dvfinalproject-mbigi-stroe-kranz/02 Shiny/Barcharts')
